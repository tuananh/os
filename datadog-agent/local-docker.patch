diff --git a/pkg/util/docker/event_pull.go b/pkg/util/docker/event_pull.go
index b89c98078f..b7ba95e7ad 100644
--- a/pkg/util/docker/event_pull.go
+++ b/pkg/util/docker/event_pull.go
@@ -80,15 +80,15 @@ func (d *DockerUtil) processContainerEvent(ctx context.Context, msg events.Messa
 	action := msg.Action
 
 	// Fix the "exec_start: /bin/sh -c true" case
-	if strings.Contains(action, ":") {
-		action = strings.SplitN(action, ":", 2)[0]
+	if strings.Contains(string(action), ":") {
+		action = events.Action(strings.SplitN(string(action), ":", 2)[0])
 	}
 
 	event := &ContainerEvent{
 		ContainerID:   msg.Actor.ID,
 		ContainerName: containerName,
 		ImageName:     imageName,
-		Action:        action,
+		Action:        string(action),
 		Timestamp:     timeFromMessage(msg),
 		Attributes:    msg.Actor.Attributes,
 	}
@@ -105,7 +105,7 @@ func (d *DockerUtil) processImageEvent(msg events.Message) *ImageEvent {
 
 	return &ImageEvent{
 		ImageID:   msg.Actor.ID,
-		Action:    msg.Action,
+		Action:    string(msg.Action),
 		Timestamp: timeFromMessage(msg),
 	}
 }
@@ -114,7 +114,7 @@ func (d *DockerUtil) processImageEvent(msg events.Message) *ImageEvent {
 // It returns the latest event timestamp in the slice for the user to store and pass again in the next call.
 func (d *DockerUtil) LatestContainerEvents(ctx context.Context, since time.Time, filter *containers.Filter) ([]*ContainerEvent, time.Time, error) {
 	var containerEvents []*ContainerEvent
-	filters := map[string]string{"type": events.ContainerEventType}
+	filters := map[string]string{"type": string(events.ContainerEventType)}
 
 	ctx, cancel := context.WithTimeout(ctx, d.queryTimeout)
 	defer cancel()
diff --git a/pkg/util/docker/event_stream.go b/pkg/util/docker/event_stream.go
index 0fe7c8a10f..82e9207bbb 100644
--- a/pkg/util/docker/event_stream.go
+++ b/pkg/util/docker/event_stream.go
@@ -152,13 +152,13 @@ CONNECT: // Outer loop handles re-connecting in case the docker daemon closes th
 func eventFilters() filters.Args {
 	res := filters.NewArgs()
 
-	res.Add("type", events.ContainerEventType)
+	res.Add("type", string(events.ContainerEventType))
 	for _, containerEventAction := range containerEventActions {
 		res.Add("event", containerEventAction)
 	}
 
 	if config.Datadog.GetBool("container_image.enabled") {
-		res.Add("type", events.ImageEventType)
+		res.Add("type", string(events.ImageEventType))
 		for _, imageEventAction := range imageEventActions {
 			res.Add("event", imageEventAction)
 		}
